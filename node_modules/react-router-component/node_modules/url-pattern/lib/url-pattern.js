// Generated by CoffeeScript 1.9.2
(function(root, factory) {
  if (('function' === typeof define) && (define.amd != null)) {
    return define([], factory);
  } else if (typeof exports !== "undefined" && exports !== null) {
    return module.exports = factory();
  } else {
    return root.UrlPattern = factory();
  }
})(this, function() {
  var Compiler, UrlPattern, escapeForRegex;
  escapeForRegex = function(string) {
    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };
  Compiler = function() {};
  Compiler.prototype.escapeChar = '\\';
  Compiler.prototype.segmentNameStartChar = ':';
  Compiler.prototype.segmentNameCharset = 'a-zA-Z0-9';
  Compiler.prototype.segmentValueCharset = 'a-zA-Z0-9-_ %';
  Compiler.prototype.optionalSegmentStartChar = '(';
  Compiler.prototype.optionalSegmentEndChar = ')';
  Compiler.prototype.wildcardChar = '*';
  Compiler.prototype.segmentValueRegexString = function() {
    return "([" + this.segmentValueCharset + "]+)";
  };
  Compiler.prototype.segmentNameCharRegex = function() {
    return new RegExp('^[' + this.segmentNameCharset + ']$');
  };
  Compiler.prototype.transition = function(nextMode) {
    if (this.mode === nextMode) {
      if (this.mode === 'namedSegment' || this.mode === 'staticSegment') {
        this.segment += this.char;
      }
      return;
    }
    if (this.mode === 'staticSegmentEscapeNextChar' && nextMode === 'staticSegment') {
      this.segment += this.char;
      this.mode = nextMode;
      return;
    }
    if (!(this.mode === 'staticSegment' && nextMode === 'staticSegmentEscapeNextChar')) {
      switch (this.mode) {
        case 'namedSegment':
          this.names.push(this.segment);
          this.regexString += this.segmentValueRegexString();
          break;
        case 'staticSegment':
          this.regexString += escapeForRegex(this.segment);
          break;
        case 'namedSegmentStart':
          if (nextMode !== 'namedSegment') {
            throw new Error("`" + this.segmentNameStartChar + "` must be followed by the name of the named segment consisting of at least one character in character set `" + this.segmentNameCharset + "` at " + this.index);
          }
      }
    }
    if (this.mode !== 'staticSegment' && nextMode === 'staticSegmentEscapeNextChar') {
      this.segment = '';
    }
    if (nextMode === 'namedSegment' || nextMode === 'staticSegment') {
      this.segment = this.char;
    }
    return this.mode = nextMode;
  };
  Compiler.prototype.compile = function(string) {
    var length, segmentNameCharRegex;
    this.string = string;
    this.index = -1;
    this.char = '';
    this.mode = 'unknown';
    this.segment = '';
    this.openParens = 0;
    this.names = [];
    this.regexString = '^';
    segmentNameCharRegex = this.segmentNameCharRegex();
    length = this.string.length;
    while (++this.index < length) {
      this.char = this.string.charAt(this.index);
      if (this.mode === 'staticSegmentEscapeNextChar') {
        this.transition('staticSegment');
        continue;
      }
      switch (this.char) {
        case this.segmentNameStartChar:
          if (this.mode === 'namedSegment') {
            throw new Error("cannot start named segment right after named segment at " + this.index);
          }
          this.transition('namedSegmentStart');
          break;
        case this.escapeChar:
          this.transition('staticSegmentEscapeNextChar');
          break;
        case this.optionalSegmentStartChar:
          this.transition('unknown');
          this.openParens++;
          this.regexString += '(?:';
          break;
        case this.optionalSegmentEndChar:
          this.transition('unknown');
          this.openParens--;
          if (this.openParens < 0) {
            throw new Error("did not expect " + this.optionalSegmentEndChar + " at " + this.index);
          }
          this.regexString += ')?';
          break;
        case this.wildcardChar:
          this.transition('unknown');
          this.regexString += '(.*?)';
          this.names.push('_');
          break;
        default:
          switch (this.mode) {
            case 'namedSegmentStart':
              if (segmentNameCharRegex.test(this.char)) {
                this.transition('namedSegment');
              } else {
                this.transition('staticSegment');
              }
              break;
            case 'namedSegment':
              if (segmentNameCharRegex.test(this.char)) {
                this.transition('namedSegment');
              } else {
                this.transition('staticSegment');
              }
              break;
            case 'staticSegment':
              this.transition('staticSegment');
              break;
            case 'unknown':
              this.transition('staticSegment');
          }
      }
    }
    if (this.openParens > 0) {
      throw new Error("unclosed parentheses at " + this.index);
    }
    this.transition('unknown');
    this.regexString += '$';
    this.regex = new RegExp(this.regexString);
  };
  UrlPattern = function(arg, compiler) {
    if (compiler == null) {
      compiler = new UrlPattern.Compiler;
    }
    if (arg instanceof UrlPattern) {
      this.isRegex = arg.isRegex;
      this.regex = arg.regex;
      this.names = arg.names;
      return;
    }
    this.isRegex = arg instanceof RegExp;
    if (!(('string' === typeof arg) || this.isRegex)) {
      throw new TypeError('argument must be a regex or a string');
    }
    if (this.isRegex) {
      this.regex = arg;
    } else {
      compiler.compile(arg);
      this.regex = compiler.regex;
      this.names = compiler.names;
    }
  };
  UrlPattern.prototype.match = function(url) {
    var bound, captured, index, length, match, name, value;
    match = this.regex.exec(url);
    if (match == null) {
      return null;
    }
    captured = match.slice(1);
    if (this.isRegex) {
      return captured;
    }
    bound = {};
    index = -1;
    length = captured.length;
    while (++index < length) {
      value = captured[index];
      name = this.names[index];
      if (value == null) {
        continue;
      }
      if (bound[name] != null) {
        if (!Array.isArray(bound[name])) {
          bound[name] = [bound[name]];
        }
        bound[name].push(value);
      } else {
        bound[name] = value;
      }
    }
    return bound;
  };
  UrlPattern.Compiler = Compiler;
  UrlPattern.escapeForRegex = escapeForRegex;
  return UrlPattern;
});
